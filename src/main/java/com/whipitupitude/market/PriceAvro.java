/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.whipitupitude.market;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PriceAvro extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6432429437106764871L;

  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(
      "{\"type\":\"record\",\"name\":\"PriceAvro\",\"namespace\":\"com.whipitupitude.market\",\"fields\":[{\"name\":\"symbol\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"double\"}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PriceAvro> ENCODER = new BinaryMessageEncoder<PriceAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PriceAvro> DECODER = new BinaryMessageDecoder<PriceAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * 
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PriceAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * 
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PriceAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the
   * specified {@link SchemaStore}.
   * 
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given
   *         SchemaStore
   */
  public static BinaryMessageDecoder<PriceAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PriceAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PriceAvro to a ByteBuffer.
   * 
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PriceAvro from a ByteBuffer.
   * 
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PriceAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into
   *                             an instance of this class
   */
  public static PriceAvro fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence symbol;
  private double price;

  /**
   * Default constructor. Note that this does not initialize fields to their
   * default values from the schema. If that is desired then one should use
   * <code>newBuilder()</code>.
   */
  public PriceAvro() {
  }

  /**
   * All-args constructor.
   * 
   * @param symbol The new value for symbol
   * @param price  The new value for price
   */
  public PriceAvro(java.lang.CharSequence symbol, java.lang.Double price) {
    this.symbol = symbol;
    this.price = price;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter. Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0:
      return symbol;
    case 1:
      return price;
    default:
      throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader. Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0:
      symbol = (java.lang.CharSequence) value$;
      break;
    case 1:
      price = (java.lang.Double) value$;
      break;
    default:
      throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'symbol' field.
   * 
   * @return The value of the 'symbol' field.
   */
  public java.lang.CharSequence getSymbol() {
    return symbol;
  }

  /**
   * Sets the value of the 'symbol' field.
   * 
   * @param value the value to set.
   */
  public void setSymbol(java.lang.CharSequence value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'price' field.
   * 
   * @return The value of the 'price' field.
   */
  public double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * 
   * @param value the value to set.
   */
  public void setPrice(double value) {
    this.price = value;
  }

  /**
   * Creates a new PriceAvro RecordBuilder.
   * 
   * @return A new PriceAvro RecordBuilder
   */
  public static com.whipitupitude.market.PriceAvro.Builder newBuilder() {
    return new com.whipitupitude.market.PriceAvro.Builder();
  }

  /**
   * Creates a new PriceAvro RecordBuilder by copying an existing Builder.
   * 
   * @param other The existing builder to copy.
   * @return A new PriceAvro RecordBuilder
   */
  public static com.whipitupitude.market.PriceAvro.Builder newBuilder(
      com.whipitupitude.market.PriceAvro.Builder other) {
    if (other == null) {
      return new com.whipitupitude.market.PriceAvro.Builder();
    } else {
      return new com.whipitupitude.market.PriceAvro.Builder(other);
    }
  }

  /**
   * Creates a new PriceAvro RecordBuilder by copying an existing PriceAvro
   * instance.
   * 
   * @param other The existing instance to copy.
   * @return A new PriceAvro RecordBuilder
   */
  public static com.whipitupitude.market.PriceAvro.Builder newBuilder(com.whipitupitude.market.PriceAvro other) {
    if (other == null) {
      return new com.whipitupitude.market.PriceAvro.Builder();
    } else {
      return new com.whipitupitude.market.PriceAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for PriceAvro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PriceAvro>
      implements org.apache.avro.data.RecordBuilder<PriceAvro> {

    private java.lang.CharSequence symbol;
    private double price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * 
     * @param other The existing Builder to copy.
     */
    private Builder(com.whipitupitude.market.PriceAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing PriceAvro instance
     * 
     * @param other The existing instance to copy.
     */
    private Builder(com.whipitupitude.market.PriceAvro other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.symbol)) {
        this.symbol = data().deepCopy(fields()[0].schema(), other.symbol);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'symbol' field.
     * 
     * @return The value.
     */
    public java.lang.CharSequence getSymbol() {
      return symbol;
    }

    /**
     * Sets the value of the 'symbol' field.
     * 
     * @param value The value of 'symbol'.
     * @return This builder.
     */
    public com.whipitupitude.market.PriceAvro.Builder setSymbol(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.symbol = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'symbol' field has been set.
     * 
     * @return True if the 'symbol' field has been set, false otherwise.
     */
    public boolean hasSymbol() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'symbol' field.
     * 
     * @return This builder.
     */
    public com.whipitupitude.market.PriceAvro.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'price' field.
     * 
     * @return The value.
     */
    public double getPrice() {
      return price;
    }

    /**
     * Sets the value of the 'price' field.
     * 
     * @param value The value of 'price'.
     * @return This builder.
     */
    public com.whipitupitude.market.PriceAvro.Builder setPrice(double value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'price' field has been set.
     * 
     * @return True if the 'price' field has been set, false otherwise.
     */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'price' field.
     * 
     * @return This builder.
     */
    public com.whipitupitude.market.PriceAvro.Builder clearPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PriceAvro build() {
      try {
        PriceAvro record = new PriceAvro();
        record.symbol = fieldSetFlags()[0] ? this.symbol : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PriceAvro> WRITER$ = (org.apache.avro.io.DatumWriter<PriceAvro>) MODEL$
      .createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PriceAvro> READER$ = (org.apache.avro.io.DatumReader<PriceAvro>) MODEL$
      .createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.symbol);

    out.writeDouble(this.price);

  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8) this.symbol : null);

      this.price = in.readDouble();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.symbol = in.readString(this.symbol instanceof Utf8 ? (Utf8) this.symbol : null);
          break;

        case 1:
          this.price = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
